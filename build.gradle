plugins {
    id 'java'
    id 'eclipse'
    id 'org.jetbrains.gradle.plugin.idea-ext' version '1.1.8'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

group = 'com.unfamoussoul'
version = '1.0'

repositories {
    mavenCentral()
    maven {url = "https://repo.papermc.io/repository/maven-public/"}
    maven {url = "https://maven.elytrium.net/repo/"}
    maven {url = "https://papermc.io/repo/repository/maven-public/"}
}

dependencies {
    compileOnly("net.elytrium.limboapi:api:$limboapiVersion")

    compileOnly("com.velocitypowered:velocity-api:$velocityVersion")
    annotationProcessor("com.velocitypowered:velocity-api:$velocityVersion")
}

shadowJar {
    getArchiveClassifier().set("")

    exclude("META-INF/licenses/**")
    exclude("META-INF/maven/**")
    exclude("META-INF/versions/**")
    exclude("META-INF/AL2.0")
    exclude("META-INF/INFO_BIN")
    exclude("META-INF/INFO_SRC")
    exclude("META-INF/LGPL2.1")
    exclude("META-INF/LICENSE")
    exclude("META-INF/NOTICE")
    exclude("META-INF/README")
    exclude("META-INF/*.txt")
    exclude("google/protobuf/**")
    exclude("com/google/protobuf/**")
    exclude("com/sun/jna/aix-ppc*/**")
    exclude("com/sun/jna/darwin-aarch64/**")
    exclude("com/sun/jna/freebsd-*/**")
    exclude("com/sun/jna/linux-arm*/**")
    exclude("com/sun/jna/linux-mips64el/**")
    exclude("com/sun/jna/linux-ppc*/**")
    exclude("com/sun/jna/linux-riscv64/**")
    exclude("com/sun/jna/linux-s390x/**")
    exclude("com/sun/jna/linux-x86/**")
    exclude("com/sun/jna/openbsd-*/**")
    exclude("com/sun/jna/sunos-*/**")
    exclude("com/sun/jna/win32-x86/**")
    exclude("org/apache/commons/codec/language/**")
    exclude("org/checkerframework/**")
    exclude("**/package-info.class")

    minimize()
}

assemble.dependsOn(shadowJar)

def targetJavaVersion = 17
java {
    toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    options.release.set(targetJavaVersion)
}

def templateSource = file('src/main/templates')
def templateDest = layout.buildDirectory.dir('generated/sources/templates')
def generateTemplates = tasks.register('generateTemplates', Copy) { task ->
    def props = ['version': project.version]
    task.inputs.properties props

    task.from templateSource
    task.into templateDest
    task.expand props
}

sourceSets.main.java.srcDir(generateTemplates.map { it.outputs })

project.idea.project.settings.taskTriggers.afterSync generateTemplates
project.eclipse.synchronizationTasks(generateTemplates)
